extensions [ palette matrix ]

breed [ vertices vertex ]
breed [ displaced-vertices displaced-vertex ]
breed [ events event ]
breed [ waypoints waypoint ]
undirected-link-breed [ lattice-edges lattice-edge ]
undirected-link-breed [ displacement-vectors displacement-vector ]
undirected-link-breed [ timeline-edges timeline-edge ]

vertices-own [
  in-buffer?
  velocity
  total-displacement
]

events-own [
  my-timeline ;; ID of timeline this event is in
  xytw        ;; raw xyt and w before rescaling
  anchors     ;; the lattice vertices used to distort position
  xyz         ;; xyz at start
  xyz-prime   ;; distorted xyz
]

waypoints-own [
  anchors     ;; lattice vertices used to distort position
  xyz         ;; xyz at start
  xyz-prime   ;; distorted xyz
]

patches-own [
  weight      ;; the amount of stuff in each patch
]

globals [
  interior         ;; patches inside the world by the buffer distance or more
  buffer-region    ;; patches in the buffer region
  xlims            ;; x y and z limits of the input data for rescaling
  ylims
  zlims
  timeline-distorted?
]

to setup
  clear-all

  ;; resize the world as required
  let dim floor ((world-size + buffer * 2) / 2)
  resize-world (- dim) dim (- dim) dim (- dim) dim

  set timeline-distorted? false

  ;; initialise the limits so we can update with the max min from the data
  set xlims [1e6 -1e6]
  set ylims [1e6 -1e6]
  set zlims [1e6 -1e6]

  make-lattice
  setup-patch-weights
  ;; set an initial view
  setxyz (max-pxcor + world-width / 4) (min-pycor - world-height / 4) (max-pzcor + world-depth / 2)

  reset-ticks
end


to go
  ;; if we're done then distort the timeline and stop
  if (max [weight] of patches / min [weight] of patches) - 1 < 1e-4 [
    distort-timeline
    stop
  ]
  ;; else recalculate velocities, displace vertices, diffuse the weight
  calculate-velocities
  displace-vertices
  diffuse weight diffusion-rate
  tick
end


;; distort the timeline by a weighted sum of each event/waypoint anchor
;; lattice vertices (this is a rough approach)
to distort-timeline
  ask (turtle-set events waypoints) [
    set xyz (list xcor ycor zcor) ;; store the start x y z
    displace-by interpolate-components
    ;; get anchor displacements and distance weights
;    let displacements map [a -> [total-displacement] of a] anchors
;    let weights distance-weights anchors 1
;    ;; sum the displacements weighted by distance
;    displace-by vector-sum (map [[v s] -> vector-scale v s] displacements weights)
    set xyz-prime (list xcor ycor zcor)  ;; store the distorted x y z
  ]
  set timeline-distorted? true
end

;; so we can switch back and forward between start and distorted views
to toggle-timeline
  ifelse timeline-distorted? [
    ask (turtle-set events waypoints) [
      setxyz item 0 xyz item 1 xyz item 2 xyz
    ]
  ]
  [
    ask (turtle-set events waypoints) [
      setxyz item 0 xyz-prime item 1 xyz-prime item 2 xyz-prime
    ]
  ]
  set timeline-distorted? not timeline-distorted?
end

;; makes the lattice
to make-lattice
  ;; first put a vertex in each patch
  ask patches [
    sprout-vertices 1 [
      set shape "circle"
      set color magenta
      set hidden? true
      set heading 0
      set pitch 90
      set in-buffer? buffer-region?
      set hidden? true
      set total-displacement [0 0 0]
    ]
  ]
  ;; determine which are in the buffer or not
  set buffer-region vertices with [buffer-region?]
  set interior vertices with [not buffer-region?]
  ;; the interior is where the vertices will get displaced
  ;; so we make 'mirror' vertices in this region to
  ;; show the displacement
  ask interior [
    hatch 1 [
      set breed displaced-vertices
      set hidden? true
      ;; link to the 'parent' vertex
      create-displacement-vector-with myself [
        set color [255 127 0 150]
      ]
    ]
  ]
  ;; link displaced-vertices to neighbors6 to make the lattice
  ask displaced-vertices [
    ask displaced-vertices-on neighbors6 [
      create-lattice-edge-with myself [
        set color [255 255 255 150]
      ]
    ]
  ]
end

;; check for patches in the buffer region around the edges or not
to-report buffer-region?
  report pxcor < min-pxcor + buffer or pxcor > max-pxcor - buffer
      or pycor < min-pycor + buffer or pycor > max-pycor - buffer
      or pzcor < min-pzcor + buffer or pzcor > max-pzcor - buffer
end

;; various possible patch-weight setups
to setup-patch-weights
  ;; from a file with timelines
  if initial-setup = "from-file" [
    ask patches [
      set weight 1 / relative-weight-of-events
    ]
    ifelse not (filename = "")
    [ load-timelines filename ]
    [ load-timelines user-file ]
  ]
  ;; these two also have a smoothing option
  ;; bomb in a suitcase example
  if initial-setup = "centre-weight" [
    ask patches [
      set weight 1
    ]
    ask patch 0 0 0 [
      set weight centre-weight
    ]
  ]
  ;; random exponential
  if initial-setup = "random-exponential" [
    ask patches [
      set weight random-exponential 1
    ]
  ]
  repeat smoothing [
    diffuse weight 0.5
  ]
  ;; initialise weights in the buffer to the mean of all
  let mean-weight mean [weight] of patches
  ask buffer-region [
    set weight mean-weight
  ]
  ;; and rescale so we still have the same total volume
  let scale-factor 1 / mean [weight] of patches
  ask patches [
    set weight weight * scale-factor
  ]
end


;; reads timelines from a file
;; id,x,y,t,w
;; ID of timeline, x, y, and t values (in t order), and weight
;; an event will be placed each x, y, t position, where it will
;; add weight w to the patch. Events will be chained together in
;; timelines based on shared ID. File should be sorted t and grouped
;; by IDs
to load-timelines [f]
  carefully [
    file-open f
    let header file-read-line  ; skip first line
    let current-id -1000       ; dummy value
    let next-id -999           ; dummy value
    let next-timeline []       ; list of strings of the current timeline
    while [not file-at-end?] [
      ;; read the next line
      let next-line file-read-line
      ;; get its ID
      set next-id read-from-string item 0 split-string next-line ","
      ;; if it's the same as the current ID then add the
      ;; string to the next timeline list of strings
      ifelse current-id = next-id [
        set next-timeline fput next-line next-timeline
      ]
      [ ;; else make events from the list and start a new list
        if length next-timeline > 0 [
          create-events-from next-timeline
        ]
        set next-timeline (list next-line)
        set current-id next-id
      ]
    ]
    ;; if we've got another timeline then make more events
    if length next-timeline > 0 [
      create-events-from next-timeline
    ]
    file-close
  ]
  [
    show error-message
  ]
  rescale-events
  link-events-into-timelines
end

;; make events from a set of strings in the input file
to create-events-from [strs]
  foreach strs [str ->
    create-events 1 [
      let vars map [s -> read-from-string s] split-string str ","
      set my-timeline item 0 vars
      set xytw sublist vars 1 5
      update-limits xytw
      set shape "circle"
      set size 0.2 * item 4 vars
      set color green
    ]
  ]
end

;; updates information about min-max xyz in the input events
to update-limits [vals]
  set xlims list min list item 0 vals item 0 xlims max list item 0 vals item 1 xlims
  set ylims list min list item 1 vals item 0 ylims max list item 1 vals item 1 ylims
  set zlims list min list item 2 vals item 0 zlims max list item 2 vals item 1 zlims
end

;; rescale event locations to match the model world dimensions
to rescale-events
  ask events [
    setxyz rescale item 0 xytw item 0 xlims item 1 xlims
                               (min-pxcor + buffer + 1) (max-pxcor - buffer - 1)
           rescale item 1 xytw item 0 ylims item 1 ylims
                               (min-pycor + buffer + 1) (max-pycor - buffer - 1)
           rescale item 2 xytw item 0 zlims item 1 zlims
                               (min-pzcor + buffer + 1) (max-pzcor - buffer - 1)
    set xyz (list xcor ycor zcor)    ; store the start x y z
    set weight weight + item 3 xytw  ; add weight of event to the patch
    set anchors get-anchors          ; set up anchor lattice vertices
  ]
end

;; likely better ways to do this, but for now just grab vertices
;; at the corners of the lattice cube this event/waypoint is in
to-report get-anchors
  let x get-integer-bounds xcor ; show x
  let y get-integer-bounds ycor ; show y
  let z get-integer-bounds zcor ; show z
  let corners [[0 0 0] [1 0 0] [0 1 0] [1 1 0]
               [0 0 1] [1 0 1] [0 1 1] [1 1 1]]
  report map [c -> vertex-on item (item 0 c) x
                             item (item 1 c) y
                             item (item 2 c) z] corners
end

;; utility function to get a single vertex at x y z
;; note the breed specification is required because of bug in turtles-at
;; see: https://github.com/NetLogo/NetLogo/issues/2046
to-report vertex-on [x y z]
  report one-of ((turtles-on patch x y z) with [breed = vertices])
end

;; rescales value x from x0-x1 scale to x2-x3 scale
to-report rescale [x x0 x1 x2 x3]
  report x2 + (x - x0) / (x1 - x0) * (x3 - x2)
end

;; for each set of events link them into a timeline
to link-events-into-timelines
  foreach remove-duplicates sort [my-timeline] of events [ id ->
    create-timeline-from sort events with [ my-timeline = id ]
  ]
end

;; from a list of events make a series of linking waypoints
;; to create timelines
to create-timeline-from [event-list]
  ;; line them up and loop through (e1 e2) (e2 e3) etc
  (foreach but-last event-list but-first event-list [ [e1 e2] ->
    let pts (sentence e1 (get-points-between e1 e2 timeline-density) e2)
    (foreach but-last pts but-first pts [[p1 p2] ->
      ask p1 [
        create-timeline-edge-with p2 [
          set color lput 150 extract-rgb lime
          set thickness 2
        ]
      ]
    ])
  ])
end

;; create a list of n waypoints equally spaced between e1 and e2
to-report get-points-between [e1 e2 n]
  let ends (list e1 e2)
  let _x interpolate-values map [t -> [xcor] of t] ends n
  let _y interpolate-values map [t -> [ycor] of t] ends n
  let _z interpolate-values map [t -> [zcor] of t] ends n
  report (map [[x y z] -> get-waypoint x y z] _x _y _z)
end

;; get a waypoint at the specified x y z
to-report get-waypoint [x y z]
  let me nobody
  create-waypoints 1 [
    set me self
    setxyz x y z
    set xyz (list x y z)
    if weight-waypoints? [
      set weight weight + 1 / timeline-density
    ]
    set size 0.1
    set color lime
    set shape "circle"
    set hidden? true
    set anchors get-anchors
  ]
  report me
end

;; get evenly spaced n intermediate values in the range between list ends
to-report interpolate-values [lst n]
  let range-x item 1 lst - item 0 lst
  let step-size range-x / (n + 1)
  report but-first n-values (n + 1) [i -> item 0 lst + step-size * i]
end

; calculate velocity of a lattice vertex
to calculate-velocities
  ask interior [
    let velocities [v-towards myself] of vertices-on neighbors6
    set velocity vector-sum velocities
  ]
end

; get velocity towards a target (based on difference in their weights
; and scaled by diffusion rate and the number of neighbours we are using (6)
to-report v-towards [tgt]
  let d distance-between self tgt
  let speed ([weight] of tgt - weight) / d
  report map [x -> x * speed * diffusion-rate / 6] vector-to tgt
end

;; displace interior vertices by calculated velocities
to displace-vertices
  ask interior [
    let vel velocity
    ; also record displacement of the initial lattice vertex
    set total-displacement vector-resultant total-displacement vel
    ask displacement-vector-neighbors [
      displace-by vel
    ]
  ]
end



;; utility stuff
to displace-by [vec]
  set xcor xcor + item 0 vec
  set ycor ycor + item 1 vec
  set zcor zcor + item 2 vec
end

to-report d-x [x]
  report (pxcor - [pxcor] of x)
end

to-report d-y [x]
  report (pycor - [pycor] of x)
end

to-report d-z [x]
  report (pzcor - [pzcor] of x)
end

to-report vector-to [x]
  report (list d-x x d-y x d-z x)
end

to-report vector-from [x]
  report (list (- d-x x) (- d-y x) (- d-z x))
end

to-report manhattan-distance [x]
  report sum (map [i -> abs i] vector-to x)
end

to-report distance-between [x y]
  let d 0
  ask x [ set d distance y ]
  report d
end

to-report vector-resultant [v1 v2]
  report (map [[a b] -> a + b] v1 v2)
end

to-report vector-sum [V]
  report reduce [[a b] -> vector-resultant a b] V
end

to-report vector-scale [v s]
  report map [a -> a * s] v
end

to-report h-distance [ x ]
  report sqrt ((pxcor - [pxcor] of x) ^ 2 + (pycor - [pycor] of x) ^ 2)
end


to-report string-as-list [str]
  report n-values length str [i -> item i str]
end

to-report split-string [str sep]
  let words []
  let this-word ""
  foreach (string-as-list str) [ c ->
    ifelse c = sep
    [ set words sentence words this-word
      set this-word "" ]
    [ set this-word word this-word c ]
  ]
  ifelse this-word = ""
  [ report words ]
  [ report sentence words this-word ]
end

;; get a list of distance weights to a set of other turtles
to-report distance-weights [others p]
  let distances map [o -> [distance myself] of o] others
  let distances-0 filter [d -> d = 0] distances
  if length distances-0 > 0 [
    let n length distances-0
    report map [d -> ifelse-value d = 0 [1 / n] [0]] distances
  ]
  let rel-weights map [d -> 1 / (d ^ p)] distances
  let tot-w sum rel-weights
  report map [w -> w / tot-w] rel-weights
end

to-report get-integer-bounds [x]
  let lower floor x
  let upper ceiling x
  if lower = upper [
    ifelse random 2 = 0
    [ set lower lower - 1 ]
    [ set upper upper + 1 ]
  ]
  report (list lower upper)
end

to-report interpolate-components
  let x map [a -> [xcor] of a] anchors
  let y map [a -> [ycor] of a] anchors
  let z map [a -> [zcor] of a] anchors
  let result []
  foreach [0 1 2] [ i ->
    let components map [a -> item i [total-displacement] of a] anchors
    let data matrix:from-column-list (list components x y z)
    let coeffs item 0 matrix:regress data
    set result lput (sum (map [[b xi] -> b * xi] (fput 1 xyz) coeffs)) result
  ]
  report result
end
@#$#@#$#@
GRAPHICS-WINDOW
0
0
398
399
-1
-1
30.0
1
10
1
1
1
0
1
1
1
-6
6
-6
6
-6
6
1
1
1
ticks
100.0

BUTTON
56
24
122
57
NIL
setup
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

BUTTON
58
66
121
99
NIL
go
T
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

BUTTON
58
104
121
137
step
go
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

BUTTON
183
235
360
268
toggle-lattice-edges
ask lattice-edges [\n  set hidden? not hidden?\n]\n \n
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

SLIDER
28
376
200
409
diffusion-rate
diffusion-rate
0.1
0.9
0.5
0.01
1
NIL
HORIZONTAL

SLIDER
149
24
321
57
world-size
world-size
3
25
9.0
2
1
NIL
HORIZONTAL

SLIDER
391
18
563
51
smoothing
smoothing
0
world-size
3.0
1
1
NIL
HORIZONTAL

MONITOR
34
170
91
215
min-w
min [weight] of patches
3
1
11

MONITOR
102
170
159
215
max-w
max [weight] of patches
3
1
11

SLIDER
205
377
377
410
centre-weight
centre-weight
1
100
50.0
1
1
NIL
HORIZONTAL

CHOOSER
235
140
428
185
initial-setup
initial-setup
"from-file" "random-exponential" "centre-weight"
0

SLIDER
435
149
607
182
timeline-density
timeline-density
0
20
3.0
1
1
NIL
HORIZONTAL

SLIDER
148
60
320
93
buffer
buffer
1
5
2.0
1
1
NIL
HORIZONTAL

BUTTON
30
235
169
268
NIL
toggle-timeline
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

TEXTBOX
211
341
361
371
These are non-file setup options
12
0.0
1

MONITOR
32
273
155
318
NIL
timeline-distorted?
0
1
11

SLIDER
392
56
630
89
relative-weight-of-events
relative-weight-of-events
0.1
10
7.5
0.1
1
NIL
HORIZONTAL

SWITCH
443
207
630
240
weight-waypoints?
weight-waypoints?
1
1
-1000

INPUTBOX
644
133
802
193
filename
tg-meeting.csv
1
0
String

TEXTBOX
475
247
625
265
EXPERIMENTAL!
12
0.0
1

TEXTBOX
647
195
797
225
set filename to blank to load from dialog
12
0.0
1

TEXTBOX
669
27
819
95
DON'T FORGET TO TURN OFF THE WIREFRAME IN THE VIEWER SETTINGS!
14
15.0
1

@#$#@#$#@
## WHAT IS IT?

The beginnings of an exploration of applying Gastner-Newman flow-cartograms to a 3D spacetime cube.

See 

Gastner M T, Newman M E, 2004, “Diffusion-based method for producing density-equalizing maps” _Proceedings of the National Academy of Sciences of the United States of America_ **101**(20) 7499–7504
@#$#@#$#@
default
true
0
Polygon -7500403 true true 150 5 40 250 150 205 260 250

airplane
true
0
Polygon -7500403 true true 150 0 135 15 120 60 120 105 15 165 15 195 120 180 135 240 105 270 120 285 150 270 180 285 210 270 165 240 180 180 285 195 285 165 180 105 180 60 165 15

arrow
true
0
Polygon -7500403 true true 150 0 0 150 105 150 105 293 195 293 195 150 300 150

box
false
0
Polygon -7500403 true true 150 285 285 225 285 75 150 135
Polygon -7500403 true true 150 135 15 75 150 15 285 75
Polygon -7500403 true true 15 75 15 225 150 285 150 135
Line -16777216 false 150 285 150 135
Line -16777216 false 150 135 15 75
Line -16777216 false 150 135 285 75

bug
true
0
Circle -7500403 true true 96 182 108
Circle -7500403 true true 110 127 80
Circle -7500403 true true 110 75 80
Line -7500403 true 150 100 80 30
Line -7500403 true 150 100 220 30

butterfly
true
0
Polygon -7500403 true true 150 165 209 199 225 225 225 255 195 270 165 255 150 240
Polygon -7500403 true true 150 165 89 198 75 225 75 255 105 270 135 255 150 240
Polygon -7500403 true true 139 148 100 105 55 90 25 90 10 105 10 135 25 180 40 195 85 194 139 163
Polygon -7500403 true true 162 150 200 105 245 90 275 90 290 105 290 135 275 180 260 195 215 195 162 165
Polygon -16777216 true false 150 255 135 225 120 150 135 120 150 105 165 120 180 150 165 225
Circle -16777216 true false 135 90 30
Line -16777216 false 150 105 195 60
Line -16777216 false 150 105 105 60

car
false
0
Polygon -7500403 true true 300 180 279 164 261 144 240 135 226 132 213 106 203 84 185 63 159 50 135 50 75 60 0 150 0 165 0 225 300 225 300 180
Circle -16777216 true false 180 180 90
Circle -16777216 true false 30 180 90
Polygon -16777216 true false 162 80 132 78 134 135 209 135 194 105 189 96 180 89
Circle -7500403 true true 47 195 58
Circle -7500403 true true 195 195 58

circle
false
0
Circle -7500403 true true 0 0 300

circle 2
false
0
Circle -7500403 true true 0 0 300
Circle -16777216 true false 30 30 240

circle 3
false
0
Circle -7500403 false true -3 -3 306

cow
false
0
Polygon -7500403 true true 200 193 197 249 179 249 177 196 166 187 140 189 93 191 78 179 72 211 49 209 48 181 37 149 25 120 25 89 45 72 103 84 179 75 198 76 252 64 272 81 293 103 285 121 255 121 242 118 224 167
Polygon -7500403 true true 73 210 86 251 62 249 48 208
Polygon -7500403 true true 25 114 16 195 9 204 23 213 25 200 39 123

cylinder
false
0
Circle -7500403 true true 0 0 300

dot
false
0
Circle -7500403 true true 90 90 120

face happy
false
0
Circle -7500403 true true 8 8 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Polygon -16777216 true false 150 255 90 239 62 213 47 191 67 179 90 203 109 218 150 225 192 218 210 203 227 181 251 194 236 217 212 240

face neutral
false
0
Circle -7500403 true true 8 7 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Rectangle -16777216 true false 60 195 240 225

face sad
false
0
Circle -7500403 true true 8 8 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Polygon -16777216 true false 150 168 90 184 62 210 47 232 67 244 90 220 109 205 150 198 192 205 210 220 227 242 251 229 236 206 212 183

fish
false
0
Polygon -1 true false 44 131 21 87 15 86 0 120 15 150 0 180 13 214 20 212 45 166
Polygon -1 true false 135 195 119 235 95 218 76 210 46 204 60 165
Polygon -1 true false 75 45 83 77 71 103 86 114 166 78 135 60
Polygon -7500403 true true 30 136 151 77 226 81 280 119 292 146 292 160 287 170 270 195 195 210 151 212 30 166
Circle -16777216 true false 215 106 30

flag
false
0
Rectangle -7500403 true true 60 15 75 300
Polygon -7500403 true true 90 150 270 90 90 30
Line -7500403 true 75 135 90 135
Line -7500403 true 75 45 90 45

flower
false
0
Polygon -10899396 true false 135 120 165 165 180 210 180 240 150 300 165 300 195 240 195 195 165 135
Circle -7500403 true true 85 132 38
Circle -7500403 true true 130 147 38
Circle -7500403 true true 192 85 38
Circle -7500403 true true 85 40 38
Circle -7500403 true true 177 40 38
Circle -7500403 true true 177 132 38
Circle -7500403 true true 70 85 38
Circle -7500403 true true 130 25 38
Circle -7500403 true true 96 51 108
Circle -16777216 true false 113 68 74
Polygon -10899396 true false 189 233 219 188 249 173 279 188 234 218
Polygon -10899396 true false 180 255 150 210 105 210 75 240 135 240

house
false
0
Rectangle -7500403 true true 45 120 255 285
Rectangle -16777216 true false 120 210 180 285
Polygon -7500403 true true 15 120 150 15 285 120
Line -16777216 false 30 120 270 120

leaf
false
0
Polygon -7500403 true true 150 210 135 195 120 210 60 210 30 195 60 180 60 165 15 135 30 120 15 105 40 104 45 90 60 90 90 105 105 120 120 120 105 60 120 60 135 30 150 15 165 30 180 60 195 60 180 120 195 120 210 105 240 90 255 90 263 104 285 105 270 120 285 135 240 165 240 180 270 195 240 210 180 210 165 195
Polygon -7500403 true true 135 195 135 240 120 255 105 255 105 285 135 285 165 240 165 195

line
true
0
Line -7500403 true 150 0 150 300

line half
true
0
Line -7500403 true 150 0 150 150

pentagon
false
0
Polygon -7500403 true true 150 15 15 120 60 285 240 285 285 120

person
false
0
Circle -7500403 true true 110 5 80
Polygon -7500403 true true 105 90 120 195 90 285 105 300 135 300 150 225 165 300 195 300 210 285 180 195 195 90
Rectangle -7500403 true true 127 79 172 94
Polygon -7500403 true true 195 90 240 150 225 180 165 105
Polygon -7500403 true true 105 90 60 150 75 180 135 105

plant
false
0
Rectangle -7500403 true true 135 90 165 300
Polygon -7500403 true true 135 255 90 210 45 195 75 255 135 285
Polygon -7500403 true true 165 255 210 210 255 195 225 255 165 285
Polygon -7500403 true true 135 180 90 135 45 120 75 180 135 210
Polygon -7500403 true true 165 180 165 210 225 180 255 120 210 135
Polygon -7500403 true true 135 105 90 60 45 45 75 105 135 135
Polygon -7500403 true true 165 105 165 135 225 105 255 45 210 60
Polygon -7500403 true true 135 90 120 45 150 15 180 45 165 90

sheep
false
15
Circle -1 true true 203 65 88
Circle -1 true true 70 65 162
Circle -1 true true 150 105 120
Polygon -7500403 true false 218 120 240 165 255 165 278 120
Circle -7500403 true false 214 72 67
Rectangle -1 true true 164 223 179 298
Polygon -1 true true 45 285 30 285 30 240 15 195 45 210
Circle -1 true true 3 83 150
Rectangle -1 true true 65 221 80 296
Polygon -1 true true 195 285 210 285 210 240 240 210 195 210
Polygon -7500403 true false 276 85 285 105 302 99 294 83
Polygon -7500403 true false 219 85 210 105 193 99 201 83

square
false
0
Rectangle -7500403 true true 30 30 270 270

square 2
false
0
Rectangle -7500403 true true 30 30 270 270
Rectangle -16777216 true false 60 60 240 240

star
false
0
Polygon -7500403 true true 151 1 185 108 298 108 207 175 242 282 151 216 59 282 94 175 3 108 116 108

target
false
0
Circle -7500403 true true 0 0 300
Circle -16777216 true false 30 30 240
Circle -7500403 true true 60 60 180
Circle -16777216 true false 90 90 120
Circle -7500403 true true 120 120 60

tree
false
0
Circle -7500403 true true 118 3 94
Rectangle -6459832 true false 120 195 180 300
Circle -7500403 true true 65 21 108
Circle -7500403 true true 116 41 127
Circle -7500403 true true 45 90 120
Circle -7500403 true true 104 74 152

triangle
false
0
Polygon -7500403 true true 150 30 15 255 285 255

triangle 2
false
0
Polygon -7500403 true true 150 30 15 255 285 255
Polygon -16777216 true false 151 99 225 223 75 224

truck
false
0
Rectangle -7500403 true true 4 45 195 187
Polygon -7500403 true true 296 193 296 150 259 134 244 104 208 104 207 194
Rectangle -1 true false 195 60 195 105
Polygon -16777216 true false 238 112 252 141 219 141 218 112
Circle -16777216 true false 234 174 42
Rectangle -7500403 true true 181 185 214 194
Circle -16777216 true false 144 174 42
Circle -16777216 true false 24 174 42
Circle -7500403 false true 24 174 42
Circle -7500403 false true 144 174 42
Circle -7500403 false true 234 174 42

turtle
true
0
Polygon -10899396 true false 215 204 240 233 246 254 228 266 215 252 193 210
Polygon -10899396 true false 195 90 225 75 245 75 260 89 269 108 261 124 240 105 225 105 210 105
Polygon -10899396 true false 105 90 75 75 55 75 40 89 31 108 39 124 60 105 75 105 90 105
Polygon -10899396 true false 132 85 134 64 107 51 108 17 150 2 192 18 192 52 169 65 172 87
Polygon -10899396 true false 85 204 60 233 54 254 72 266 85 252 107 210
Polygon -7500403 true true 119 75 179 75 209 101 224 135 220 225 175 261 128 261 81 224 74 135 88 99

wheel
false
0
Circle -7500403 true true 3 3 294
Circle -16777216 true false 30 30 240
Line -7500403 true 150 285 150 15
Line -7500403 true 15 150 285 150
Circle -7500403 true true 120 120 60
Line -7500403 true 216 40 79 269
Line -7500403 true 40 84 269 221
Line -7500403 true 40 216 269 79
Line -7500403 true 84 40 221 269

wolf
false
0
Polygon -16777216 true false 253 133 245 131 245 133
Polygon -7500403 true true 2 194 13 197 30 191 38 193 38 205 20 226 20 257 27 265 38 266 40 260 31 253 31 230 60 206 68 198 75 209 66 228 65 243 82 261 84 268 100 267 103 261 77 239 79 231 100 207 98 196 119 201 143 202 160 195 166 210 172 213 173 238 167 251 160 248 154 265 169 264 178 247 186 240 198 260 200 271 217 271 219 262 207 258 195 230 192 198 210 184 227 164 242 144 259 145 284 151 277 141 293 140 299 134 297 127 273 119 270 105
Polygon -7500403 true true -1 195 14 180 36 166 40 153 53 140 82 131 134 133 159 126 188 115 227 108 236 102 238 98 268 86 269 92 281 87 269 103 269 113

x
false
0
Polygon -7500403 true true 270 75 225 30 30 225 75 270
Polygon -7500403 true true 30 75 75 30 270 225 225 270
@#$#@#$#@
NetLogo 3D 6.2.0
@#$#@#$#@
@#$#@#$#@
@#$#@#$#@
@#$#@#$#@
@#$#@#$#@
default
0.0
-0.2 0 0.0 1.0
0.0 1 1.0 0.0
0.2 0 0.0 1.0
link direction
true
0
Line -7500403 true 150 150 90 180
Line -7500403 true 150 150 210 180
@#$#@#$#@
0
@#$#@#$#@
